/**
 *
 *  PersonalData.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "PersonalData.h"
#include "Users.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::cxx_test;

const std::string PersonalData::Cols::_id = "id";
const std::string PersonalData::Cols::_forename = "forename";
const std::string PersonalData::Cols::_family_name = "family_name";
const std::string PersonalData::Cols::_age = "age";
const std::string PersonalData::primaryKeyName = "id";
const bool PersonalData::hasPrimaryKey = true;
const std::string PersonalData::tableName = "personal_data";

const std::vector<typename PersonalData::MetaData> PersonalData::metaData_={
{"id","int32_t","integer",4,1,1,1},
{"forename","std::string","character varying",50,0,0,0},
{"family_name","std::string","character varying",50,0,0,0},
{"age","short","smallint",2,0,0,0}
};
const std::string &PersonalData::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
PersonalData::PersonalData(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["forename"].isNull())
        {
            forename_=std::make_shared<std::string>(r["forename"].as<std::string>());
        }
        if(!r["family_name"].isNull())
        {
            familyName_=std::make_shared<std::string>(r["family_name"].as<std::string>());
        }
        if(!r["age"].isNull())
        {
            age_=std::make_shared<short>(r["age"].as<short>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 4 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            forename_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            familyName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            age_=std::make_shared<short>(r[index].as<short>());
        }
    }

}

PersonalData::PersonalData(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            forename_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            familyName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            age_=std::make_shared<short>((short)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
}

PersonalData::PersonalData(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("forename"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["forename"].isNull())
        {
            forename_=std::make_shared<std::string>(pJson["forename"].asString());
        }
    }
    if(pJson.isMember("family_name"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["family_name"].isNull())
        {
            familyName_=std::make_shared<std::string>(pJson["family_name"].asString());
        }
    }
    if(pJson.isMember("age"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["age"].isNull())
        {
            age_=std::make_shared<short>((short)pJson["age"].asInt64());
        }
    }
}

void PersonalData::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            forename_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            familyName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            age_=std::make_shared<short>((short)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
}

void PersonalData::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("forename"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["forename"].isNull())
        {
            forename_=std::make_shared<std::string>(pJson["forename"].asString());
        }
    }
    if(pJson.isMember("family_name"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["family_name"].isNull())
        {
            familyName_=std::make_shared<std::string>(pJson["family_name"].asString());
        }
    }
    if(pJson.isMember("age"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["age"].isNull())
        {
            age_=std::make_shared<short>((short)pJson["age"].asInt64());
        }
    }
}

const int32_t &PersonalData::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &PersonalData::getId() const noexcept
{
    return id_;
}
void PersonalData::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename PersonalData::PrimaryKeyType & PersonalData::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &PersonalData::getValueOfForename() const noexcept
{
    static const std::string defaultValue = std::string();
    if(forename_)
        return *forename_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PersonalData::getForename() const noexcept
{
    return forename_;
}
void PersonalData::setForename(const std::string &pForename) noexcept
{
    forename_ = std::make_shared<std::string>(pForename);
    dirtyFlag_[1] = true;
}
void PersonalData::setForename(std::string &&pForename) noexcept
{
    forename_ = std::make_shared<std::string>(std::move(pForename));
    dirtyFlag_[1] = true;
}
void PersonalData::setForenameToNull() noexcept
{
    forename_.reset();
    dirtyFlag_[1] = true;
}

const std::string &PersonalData::getValueOfFamilyName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(familyName_)
        return *familyName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PersonalData::getFamilyName() const noexcept
{
    return familyName_;
}
void PersonalData::setFamilyName(const std::string &pFamilyName) noexcept
{
    familyName_ = std::make_shared<std::string>(pFamilyName);
    dirtyFlag_[2] = true;
}
void PersonalData::setFamilyName(std::string &&pFamilyName) noexcept
{
    familyName_ = std::make_shared<std::string>(std::move(pFamilyName));
    dirtyFlag_[2] = true;
}
void PersonalData::setFamilyNameToNull() noexcept
{
    familyName_.reset();
    dirtyFlag_[2] = true;
}

const short &PersonalData::getValueOfAge() const noexcept
{
    static const short defaultValue = short();
    if(age_)
        return *age_;
    return defaultValue;
}
const std::shared_ptr<short> &PersonalData::getAge() const noexcept
{
    return age_;
}
void PersonalData::setAge(const short &pAge) noexcept
{
    age_ = std::make_shared<short>(pAge);
    dirtyFlag_[3] = true;
}
void PersonalData::setAgeToNull() noexcept
{
    age_.reset();
    dirtyFlag_[3] = true;
}

void PersonalData::updateId(const uint64_t id)
{
}

const std::vector<std::string> &PersonalData::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "forename",
        "family_name",
        "age"
    };
    return inCols;
}

void PersonalData::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getForename())
        {
            binder << getValueOfForename();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getFamilyName())
        {
            binder << getValueOfFamilyName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getAge())
        {
            binder << getValueOfAge();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> PersonalData::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    return ret;
}

void PersonalData::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getForename())
        {
            binder << getValueOfForename();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getFamilyName())
        {
            binder << getValueOfFamilyName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getAge())
        {
            binder << getValueOfAge();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value PersonalData::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getForename())
    {
        ret["forename"]=getValueOfForename();
    }
    else
    {
        ret["forename"]=Json::Value();
    }
    if(getFamilyName())
    {
        ret["family_name"]=getValueOfFamilyName();
    }
    else
    {
        ret["family_name"]=Json::Value();
    }
    if(getAge())
    {
        ret["age"]=getValueOfAge();
    }
    else
    {
        ret["age"]=Json::Value();
    }
    return ret;
}

Json::Value PersonalData::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 4)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getForename())
            {
                ret[pMasqueradingVector[1]]=getValueOfForename();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getFamilyName())
            {
                ret[pMasqueradingVector[2]]=getValueOfFamilyName();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getAge())
            {
                ret[pMasqueradingVector[3]]=getValueOfAge();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getForename())
    {
        ret["forename"]=getValueOfForename();
    }
    else
    {
        ret["forename"]=Json::Value();
    }
    if(getFamilyName())
    {
        ret["family_name"]=getValueOfFamilyName();
    }
    else
    {
        ret["family_name"]=Json::Value();
    }
    if(getAge())
    {
        ret["age"]=getValueOfAge();
    }
    else
    {
        ret["age"]=Json::Value();
    }
    return ret;
}

bool PersonalData::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("forename"))
    {
        if(!validJsonOfField(1, "forename", pJson["forename"], err, true))
            return false;
    }
    if(pJson.isMember("family_name"))
    {
        if(!validJsonOfField(2, "family_name", pJson["family_name"], err, true))
            return false;
    }
    if(pJson.isMember("age"))
    {
        if(!validJsonOfField(3, "age", pJson["age"], err, true))
            return false;
    }
    return true;
}
bool PersonalData::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool PersonalData::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("forename"))
    {
        if(!validJsonOfField(1, "forename", pJson["forename"], err, false))
            return false;
    }
    if(pJson.isMember("family_name"))
    {
        if(!validJsonOfField(2, "family_name", pJson["family_name"], err, false))
            return false;
    }
    if(pJson.isMember("age"))
    {
        if(!validJsonOfField(3, "age", pJson["age"], err, false))
            return false;
    }
    return true;
}
bool PersonalData::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool PersonalData::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson,
                                    std::string &err,
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Users PersonalData::getUsers(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from users where personal_data_id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *id_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Users(r[0]);
}

void PersonalData::getUsers(const DbClientPtr &clientPtr,
                            const std::function<void(Users)> &rcb,
                            const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from users where personal_data_id = $1";
    *clientPtr << sql
               << *id_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Users(r[0]));
                    }
               }
               >> ecb;
}
